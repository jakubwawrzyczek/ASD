#include <iostream>
#include <chrono>
#include "Node.h"
#include "List.h"

using namespace std;
using namespace std::chrono;

int main() {

    List list1;
    list1.addH(56);
    list1.addH(23);
    list1.addH(16);
    list1.addH(12);
    list1.addH(3);
    list1.addH(-5);
    list1.addH(-2);
    list1.addH(-8);
    list1.addH(0);
    list1.addH(-3);
    list1.addH(56);
    list1.addH(23);
    list1.addH(16);
    list1.addH(12);
    list1.addH(3);
    list1.addH(-5);
    list1.addH(-2);
    list1.addH(-8);
    list1.addH(0);
    list1.addH(-3);
    list1.addH(56);
    list1.addH(23);
    list1.addH(16);
    list1.addH(12);
    list1.addH(3);
    list1.addH(-5);
    list1.addH(-2);
    list1.addH(-8);
    list1.addH(0);
    list1.addH(-3);
    list1.addH(56);
    list1.addH(23);
    list1.addH(16);
    list1.addH(12);
    list1.addH(3);
    list1.addH(-5);
    list1.addH(-2);
    list1.addH(-8);
    list1.addH(0);
    list1.addH(-3);
    list1.addH(56);
    list1.addH(23);
    list1.addH(16);
    list1.addH(12);
    list1.addH(3);
    list1.addH(-5);
    list1.addH(-2);
    list1.addH(-8);
    list1.addH(0);
    list1.addH(-3);
    list1.addH(56);
    list1.addH(23);
    list1.addH(16);
    list1.addH(12);
    list1.addH(3);
    list1.addH(-5);
    list1.addH(-2);
    list1.addH(-8);
    list1.addH(0);
    list1.addH(-3);
    list1.addH(56);
    list1.addH(23);
    list1.addH(16);
    list1.addH(12);
    list1.addH(3);
    list1.addH(-5);
    list1.addH(-2);
    list1.addH(-8);
    list1.addH(0);
    list1.addH(-3);

    List list2;
    list2.addH(56);
    list2.addH(23);
    list2.addH(16);
    list2.addH(12);
    list2.addH(3);
    list2.addH(-5);
    list2.addH(-2);
    list2.addH(-8);
    list2.addH(0);
    list2.addH(-3);
    list2.addH(56);
    list2.addH(23);
    list2.addH(16);
    list2.addH(12);
    list2.addH(3);
    list2.addH(-5);
    list2.addH(-2);
    list2.addH(-8);
    list2.addH(0);
    list2.addH(-3);
    list2.addH(56);
    list2.addH(23);
    list2.addH(16);
    list2.addH(12);
    list2.addH(3);
    list2.addH(-5);
    list2.addH(-2);
    list2.addH(-8);
    list2.addH(0);
    list2.addH(-3);
    list2.addH(56);
    list2.addH(23);
    list2.addH(16);
    list2.addH(12);
    list2.addH(3);
    list2.addH(-5);
    list2.addH(-2);
    list2.addH(-8);
    list2.addH(0);
    list2.addH(-3);
    list2.addH(56);
    list2.addH(23);
    list2.addH(16);
    list2.addH(12);
    list2.addH(3);
    list2.addH(-5);
    list2.addH(-2);
    list2.addH(-8);
    list2.addH(0);
    list2.addH(-3);
    list2.addH(56);
    list2.addH(23);
    list2.addH(16);
    list2.addH(12);
    list2.addH(3);
    list2.addH(-5);
    list2.addH(-2);
    list2.addH(-8);
    list2.addH(0);
    list2.addH(-3);
    list2.addH(56);
    list2.addH(23);
    list2.addH(16);
    list2.addH(12);
    list2.addH(3);
    list2.addH(-5);
    list2.addH(-2);
    list2.addH(-8);
    list2.addH(0);
    list2.addH(-3);


    List list3;
    list3.addH(56);
    list3.addH(23);
    list3.addH(16);
    list3.addH(12);
    list3.addH(3);
    list3.addH(-5);
    list3.addH(-2);
    list3.addH(-8);
    list3.addH(0);
    list3.addH(-3);
    list3.addH(56);
    list3.addH(23);
    list3.addH(16);
    list3.addH(12);
    list3.addH(3);
    list3.addH(-5);
    list3.addH(-2);
    list3.addH(-8);
    list3.addH(0);
    list3.addH(-3);
    list3.addH(56);
    list3.addH(23);
    list3.addH(16);
    list3.addH(12);
    list3.addH(3);
    list3.addH(-5);
    list3.addH(-2);
    list3.addH(-8);
    list3.addH(0);
    list3.addH(-3);
    list3.addH(56);
    list3.addH(23);
    list3.addH(16);
    list3.addH(12);
    list3.addH(3);
    list3.addH(-5);
    list3.addH(-2);
    list3.addH(-8);
    list3.addH(0);
    list3.addH(-3);
    list3.addH(56);
    list3.addH(23);
    list3.addH(16);
    list3.addH(12);
    list3.addH(3);
    list3.addH(-5);
    list3.addH(-2);
    list3.addH(-8);
    list3.addH(0);
    list3.addH(-3);
    list3.addH(56);
    list3.addH(23);
    list3.addH(16);
    list3.addH(12);
    list3.addH(3);
    list3.addH(-5);
    list3.addH(-2);
    list3.addH(-8);
    list3.addH(0);
    list3.addH(-3);
    list3.addH(56);
    list3.addH(23);
    list3.addH(16);
    list3.addH(12);
    list3.addH(3);
    list3.addH(-5);
    list3.addH(-2);
    list3.addH(-8);
    list3.addH(0);
    list3.addH(-3);


    // --------------------------------



    cout << "Bubble Sort" << endl;
    auto start = high_resolution_clock::now();
    list1.bubbleSort();
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "Czas sortowania: " << duration.count()  << " mikrosekund" << endl;

    cout << "\nSortowanie przez wybieranie" << endl;
    start = high_resolution_clock::now();
    list2.sortowaniePrzezWybieranie();
    stop = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop - start);
    cout << "Czas sortowania: " << duration.count() << " mikrosekund" << endl;

    cout << "\nComb Sort" << endl;
    start = high_resolution_clock::now();
    list3.combSort();
    stop = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop - start);
    cout << "Czas sortowania: " << duration.count() << " mikrosekund" << endl;

}
